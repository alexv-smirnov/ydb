name: On-demand VM Build+Test

on: 
  workflow_dispatch:
  
env:
  ALLURE_TOKEN: ${{ secrets.ALLURE_TOKEN }}
  ALLURE_ENDPOINT: ${{ secrets.ALLURE_ENDPOINT }}
  ALLURE_PROJECT_ID: ${{ vars.ALLURE_PROJECT_ID }}
  
jobs:

  start-runner:
    name: Start self-hosted YC runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-yc-runner.outputs.label }}
      instance-id: ${{ steps.start-yc-runner.outputs.instance-id }}
    steps:
      - name: Start YC runner
        id: start-yc-runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: start
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          folder-id: b1gkd7mdvthhba180rcl
          image-id: fd8snjpoq85qqv0mk9gi
          disk-size: 930GB
          disk-type: network-ssd-nonreplicated
          cores: 32
          memory: 64GB
          core-fraction: 100
          zone-id: ru-central1-b
          subnet-id: e2li3l3l0jpuk44kgjoa

  build-and-test:
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner

    steps:
    - name: Install dependencies
      shell: bash
      run: |
        curl -X PUT http://cache_user:JJnn11qq@10.129.0.27:8080/ac/af54d75a499f0cd57ca9a732d1d7372f968ed304af54d75a499f0cd57ca9a732
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo apt-key add -
        echo "deb http://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
        echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/llvm.list >/dev/null
        sudo apt-get update
        sudo apt-get -y install git cmake python3-pip ninja-build antlr3 m4 clang-12 lld-12 libidn11-dev libaio1 libaio-dev
        sudo pip3 install conan==1.59
    - name: Checkout ccache
      uses: actions/checkout@v3
      with:
        repository: ccache/ccache
        path: ccache
    - name: Build ccache
      shell: bash
      run: |
        pwd
        cd ccache
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make -j32
        make install
    - name: Checkout YDB
      uses: actions/checkout@v3
    - name: Configure YDB
      shell: bash
      run: |
        pwd
        mkdir ../build
        mkdir ../test_reports
        mkdir ~/.ccache
        cd ../build
        rm -rf *
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_TOOLCHAIN_FILE=../ydb/clang.toolchain ../ydb
    - name: Build YDB
      shell: bash
      run: |
        cd ../build
        ccache --set-config=remote_storage='http://cache_user:JJnn11qq@10.129.0.27|layout=bazel|connect-timeout=50'
        ccache --set-config=max_size=50G
        ccache --set-config=log_file=$(pwd)/ccache.log
        ccache -p
        ninja contrib/libs/base64/all
        ccache -s
        cat ccache.log
    - name: Test YDB
      shell: bash
      run: |
        cd ../build/ydb
        rm -rf $(pwd)/../../tmp/*
        rm -rf $(pwd)/../../test_reports/*
        # Our test util provides output with coloring, so remove it using sed before sending to grep
        TMPDIR=$(pwd)/../../tmp GTEST_OUTPUT="xml:$(pwd)/../../test_reports/" Y_UNITTEST_OUTPUT="xml:$(pwd)/../../test_reports/" \
          ~/allurectl watch --results $(pwd)/../../test_reports/ -- \
          ctest -j28 --timeout 1200 --force-new-ctest-process --output-on-failure \
            --output-junit $(pwd)/../../test_reports/ctest_report.xml \
            -L '(SMALL|MEDIUM)' | \
          sed -e 's/\x1b\[[0-9;]*m//g' | \
          tee testrun.log | \
          grep -E '(Test\s*#.*\*\*\*|\[FAIL\])|.*tests passed,.*tests failed out of'
  
  stop-runner:
    name: Stop self-hosted YC runner
    needs:
      - start-runner # required to get output from the start-runner job
      - build-and-test # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Stop YC runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: stop
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          instance-id: ${{ needs.start-runner.outputs.instance-id }}
